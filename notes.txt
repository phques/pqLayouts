
+ with the keyboard low level hook and SendInput, we are working with KEYS (virtual keys, ie VK_xx),
  not characters .. ie if we want to map (unshifted) key 'q' to '?',
  we need to send shift-/ (?)

+ the VK_ values for a..z are A..Z, uppercase !
 -> using VkKeyScanExA() seems to handle this correctly

 -> NOTE, this also means doing a French layout is not easily possible !!
  (again we don't output characters, but keys ..)
   -> it would need to find the VK_xx code(s) from a french MS layout,
   when we use our mappings, we need to have the correct MS layout active too

   -> chars like 'à' that I type with a deakey + a, how to generate this ??
      SendInput both ??
      -> possibly use the US intl layout, it might have all required accented chars on altGr?
         not really, needs dead keys
	   -> use azerty ?
	   -> build my own !!?

   -> it seems like VkKeyScanExA w/o a kbdLayout parameter looks in all installed MS layouts !
     -> for eg passing é while in a US layout, will correctly find / (which output é in CAFR layout)

   -> not very clear behaviour .. if the CAFR layout is active VkKeyScanExA seems to actually fail !???
      also à does not map correctly ? (kinda expected)
      will need to try loading a kbd layout and pass it to VkKeyScanExA

   -> probably works if we load and pass a KHL for french layout to VkKeyScanExA
     (now using VkKeyScanA)

 
+ -- scancode vs VK ----

// with Windows layouts that use AltGr, right Alt actually outputs
// LCtrl + RAlt .. but with a weird scancode for LCtrl, (0x21D instead of 0x1D)
// ie we don't send exactly the same vk / scancode, it screws up and LCtrl up is never generated !!!

@A20D0B   wparam: 104 vk: A2 scan: 21D  dn  ex flags: 00100000
@A20D0B   wparam: 104 vk: A5 scan: 38  dn  EX flags: 00100001

+ Note also that apparently, contrary to what I would expect, 
  a scancode does NOT identify a physical key, (I thought that was the definition of a scancode !!!)
  -> both left and right Ctrl have the same scancode (right ones are flagged 'extended' though)
  -> BUT they DO have different VKs !
  -> also see nte above for AltGr's LCtrl

+ getting the scancode from the VK does not seem to be 100% possible !
UINT scancode = MapVirtualKeyExA(vk, MAPVK_VK_TO_VSC_EX, NULL);
// a few keys don't seem to properly convert to scan code (kbd specific?)
//## PrtScrn, Pause don't convert to the scancode that we received in the kbd hook event !?

-----------

+? should map keys based on both (VK & scancode), to avoid probs for eg w. AltGr,
  see above
 => how to be certain I have the correct scancodes ??
    -> need to learn the kbd ?? pretty annoying
    -> I guess that mapping on vk_code and ignoring unknown values should be Ok

----

+ chording
---

*** branch early-chord-b 2021-04-17  ***
This branch tries this approach:
We accumulate pressed keys without outputing / executing anything until all pressed keys are up.
We then replay the keys..
If in that sequence we have a chord then the chord will replace those keys in the replay

nb: 2021-04-18, work in progress, does not do the actual chording yet .. see encountered probs below:


***!!
-> cannot Shift-click or Ctrl-Click !!**

a)-> causes problems when doing edits
  - when selecting we hold Shift and use arrows, nothing happens until we release !
  -> don't gather keys when on a layer that does not have chords and only use edit layer (?)

-> we don't see layers change live
  -> detect layer changes while gathering:
    - go to it if it does not have chords
    - otherwise, send the layer change msg so that the help image updates
  -> need to detect Shifts too and also send the layer change msg

-> maybe have a way to suspend chording? for editing, for example.
  - would also allow to auto-repeat keys

??-=> possible mod of this approach:
  - execute modifiers and layer changes as we gather !
    -> would let us do shift or ctrl-click
    -> help image would update
  - still have problem a) above though

??-=> only gather when 'steno keys' are pressed in idle mode (i.e. no keys down)
 -> means cannot use modifiers with chords
   (might be safer anyways ! a bit dangerous otherwise: 
    ctrl-chord_that_output_bunchs_of_chars .. could have disastrous results!)
 -> what about layerAccess ?? do special case for this (?)
 ??=> this actually is more or less the approach on the master branch anyways

----

+ give an error if trying to define chords before stkpower

+ 'repeat' key

+ multi chars output chords:
  + bug: outut "sp" is interpreted a the SP key !!
    -> make all key names uppercase?
->? for 'steaks', use /sse dd/ to enter literal text ??
  /sp/ would be "sp" not a space
  /^c/ "^c" not ctrl-c
  Would also permit to have spaces in output:
  /this is some text/
  /, /  <- auto space after ','

+ reverse order of chord def vs chord ouput:
  P-P  .


--- usage ideas


+ for consonants chords (to reduce need to use alt multiple times in a row)
  : auto-generate (w. a pgrm) (or in pqLayouts !!? dont think so)
    all permutations chords to access in a logical manner two consecutives consonants from two layers
    - right hand presses both wanted keys (from current layer + other layer),
    - left hand presses keys to indicate consonants chording 
      - use -k and -w for left to right / right to left
        ie, indicates which one is one the corrent layer
    *-> need to be 'geographically' aware, some of the chords' left / right logic is reversed
    - use chords with extra key on the left hand iso using layer access


---

+ one-shot modifier, layer
  (set temp 'need xyz' flag in found action key?)

+ see about how Plover handles kbd hook & text output,
  possibility of using its lib ?
  -> this could let me have a Mac version of pqLayouts !?

+ add support for 'alt' prefix on char, 
  -> alt-tab !!
  -> ctrl-shift (Sublime Text, column selection)
